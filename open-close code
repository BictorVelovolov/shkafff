#include <Wire.h>
#include <SPI.h>
#include <Servo.h>
#include "Adafruit_PN532.h"

#define PN532_IRQ   9
 
// создаём объект для работы со сканером и передаём ему два этих параметра
// первый — номер пина прерывания
// вторым — число 100
Adafruit_PN532 nfc(PN532_IRQ, 100);


Servo servo1;
Servo servo2;
Servo servo3;
Servo servo4;

bool avaliable1;
bool avaliable2;
bool avaliable3;
bool avaliable4;


// Массивы в которые необходимо записать ID карт:
uint8_t uidFirstCard[] = "";
uint8_t uidSecondCard[] = "";
uint8_t uidThirdCard[] = "";
uint8_t uidFourthCard[] = "";
uint8_t uidReserveCard[] = "";

uint8_t uidMaster1[] = "";
uint8_t uidMaster2[] = "";
uint8_t uidMaster3[] = "";

 
// булеан который сравнивает два переданных ID
// при совпадении возвращает значение true
// и значение false если ID разные
boolean comparisonOfUid(uint8_t uidRead[8], uint8_t uidComp[8], uint8_t uidLen) {
  for (uint8_t i = 0; i < uidLen; i++) {
    if (uidRead[i] != uidComp[i]) {
      return false;
    }
    if (i == (uidLen)-0x01) {
      return true;
    }
  }
}
 
void setup() {

  // инициализация Serial - порта
  Serial.begin(9600);
  // инициализация RFID/NFC сканера
  nfc.begin();
  int versiondata = nfc.getFirmwareVersion();
  if (!versiondata) {
    while (1) {
      Serial.print("Ne nayden RFID/NFC reader");
      delay(1000);
    }
  }
  Serial.println("Nayden RFID/NFC reader");
  nfc.SAMConfig();
  Serial.println("Ogidaem kartochku ...");

  servo1.attach(10);
  servo2.attach(11);
  servo3.attach(12);
  servo4.attach(13);

  //поворот сервы на 90 градусов (закрытие)
  servo1.write(120);
  servo2.write(120);
  servo3.write(120);
  servo4.write(120);


  avaliable1 = true;
  avaliable2 = true;
  avaliable3 = true;
  avaliable4 = true;
  
}
 
void loop(void) {
  uint8_t success;
  // буфер для хранения ID карты
  uint8_t uid[8];
  // размер буфера равен стандартной длинне ID
  uint8_t uidLength;
  // скан новых меток
  success = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);
  // если найдена карта
  if (success) {
    // выводит в консоль полученные данные
    Serial.print("ID Length: ");
    Serial.print(uidLength, DEC);
    Serial.println(" bytes");
    Serial.print("ID Value: ");
    uint8_t uidReserveCard[] = {uid, uidLength};
    nfc.PrintHex(uid, uidLength);
    Serial.println("");
    Serial.println();
    // Открывает серву1 если сравнение совпадает
    // если ID вернёт true:
    if (comparisonOfUid(uid, uidFirstCard, uidLength)) {
     servo1.write(30);
     Serial.println("First comp");
     //повторное сканирование для закрытия
     uint8_t locking;
     locking = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);
     if (locking) {
       if (comparisonOfUid(uid, uidFirstCard, uidLength)) {
         //поворачиваем серву1 для закрытия
         servo1.write(120);
         avaliable1 = true;
         uint8_t uidFirstCard = "";
         Serial.println("Avaliable 1");
        }
      }
    } else {
      // Открывает серву2 если сравнение совпадает
      if (comparisonOfUid(uid, uidSecondCard, uidLength)) {
        servo2.write(30);
        Serial.println("Second comp");
        //повторное сканирование для закрытия
        uint8_t locking;
        locking = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);
        if (locking) {
          if (comparisonOfUid(uid, uidSecondCard, uidLength)) {
            //поворачиваем серву2 для закрытия
            servo2.write(120);
            avaliable2 = true;
            uint8_t uidSecondCard = "";
            Serial.println("Avaliable 2");
          }
        }
      } else {
        // Открывает серву3 если сравнение совпадает
        if (comparisonOfUid(uid, uidThirdCard, uidLength)) {
          servo3.write(30);
          Serial.println("Third comp");
          //повторное сканирование для закрытия
          uint8_t locking;
          locking = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);
          if (locking) {
            if (comparisonOfUid(uid, uidThirdCard, uidLength)) {
              //поворачиваем серву3 для закрытия
              servo3.write(120);
              avaliable3 = true;
              uint8_t uidThirdCard = "";
              Serial.println("Avaliable 3");
            }
          }
        } else {
          // Открывает серву4 если сравнение совпадет
          if (comparisonOfUid(uid, uidFourthCard, uidLength)) {
           servo4.write(30);
           Serial.println("Fourth comp");
           //повторное сканирование для закрытия
           uint8_t locking;
           locking = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);
           if (locking) {
             if (comparisonOfUid(uid, uidFourthCard, uidLength)) {
              //поворачиваем серву3 для закрытия
              servo4.write(120);
              avaliable4 = true;
              uint8_t uidFourthCard = "";
              Serial.println("Avaliable 4");
             }
           }       
         } else {
            //если нет совпадения
            Serial.println("No comp");
            //если свободен первый - открыть
            if (avaliable1) {
             servo1.write(30);
             Serial.println("Open 1");
             uint8_t uidFirstCard = uidReserveCard;
             //повторное сканирование для закрытия
             uint8_t locking;
             locking = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);
             Serial.println("Ogidaem povtorno kartochku");
             while (locking == "") {
               delay(1);
               locking = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);
             }
               Serial.println("Sravnivaem kartochku");
               if (comparisonOfUid(uid, uidFirstCard, uidLength)) {
                 //поворачиваем серву1 для закрытия
                 servo1.write(120);
                 Serial.println("Lock 1");
                 avaliable1 = false;
             }
            } else {
              //если свободен второй - открыть
              if (avaliable2) {
                servo2.write(30);
                Serial.println("Open 2");
                uint8_t uidSecondCard = uidReserveCard;
                //повторное сканирование для закрытия
                uint8_t locking;
                locking = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);
                if (locking) {
                  if (comparisonOfUid(uid, uidSecondCard, uidLength)) {
                    //поворот сервы2 для закрытия
                    servo2.write(120);
                    Serial.println("Lock 2");
                    avaliable2 = false;
                  }
                }
              } else {
                //если свободен третий - открыть
                if (avaliable3) {
                  servo3.write(30);
                  Serial.println("Open 3");
                  uint8_t uidThirdCard = uidReserveCard;
                  uint8_t locking;
                  locking = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);
                  if (locking) {
                    if (comparisonOfUid(uid, uidThirdCard, uidLength)) {
                      //поворачиваем серву3 для закрытия
                      servo3.write(120);
                      Serial.println("Lock 3");
                      avaliable3 = false;                      
                    }
                  }
                } else {
                  //если свободен четвертый - открыть
                  if (avaliable4) {
                    servo4.write(30);
                    Serial.println("Open 4");
                    uint8_t uidFourthCard = uidReserveCard;
                    uint8_t locking;
                    locking = nfc.readPassiveTargetID(PN532_MIFARE_ISO14443A, uid, &uidLength);
                    if (locking) {
                      if (comparisonOfUid(uid, uidFourthCard, uidLength)) {
                        //поворачивает серву4 для закрытия
                        servo4.write(120);
                        Serial.println("Lock 4");
                        avaliable4 = false;
                      }
                    }
                  }
                }
              }
            }
         }
        }
      }
    }
  delay(3000);
  }
}
